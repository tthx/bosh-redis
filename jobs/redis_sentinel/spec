---
name: redis_sentinel

templates:
  config/redis_sentinel.conf.erb: config/redis_sentinel.conf
  keys/ca.crt.erb: keys/ca.crt
  keys/ca.key.erb: keys/ca.key
  bin/pre-start.erb: bin/pre-start
  bin/redis_sentinel_ctl.erb: bin/redis_sentinel_ctl
  bin/pre-stop.erb: bin/pre-stop

packages:
- redis

provides:
- name: redis_sentinel_conn
  type: sentinel_conn
  properties:
  - bind
  - port
  - password
  - tls
  - tls_port
  - tls_ca_certificate
  - tls_ca_private_key
  - tls_auth_clients
  - tls_replication
  - tls_protocols
  - tls_ciphers
  - tls_ciphersuites
  - tls_prefer_server_ciphers

consumes:
- name: redis_sentinel_conn
  type: sentinel_conn

properties:
  bind:
    default: false
    description:  |
      Specify this property to "true" if you would like the bind address of a given instance to be automatically set to its assigned static IP. Otherwise, Redis Sentinel listens only on "localhost".
  port:
    default: "26379"
    description: |
      The port that this Redis Sentinel instance will run on.
  run_dir:
    default: "/var/vcap/sys/run/redis_sentinel"
    description: |
      Directory where to store Redis Sentinel pid file.
  pidfile:
    default: "redis_sentinel.pid"
    description: |
      When running daemonized, Redis Sentinel writes a pid file.
  log_dir:
    default: "/var/vcap/sys/log/redis_sentinel"
    description: |
      Directory where to store Redis Sentinel log file.
  logfile:
    default: "redis_sentinel.log"
    description: |
      Specify the log file name. Also the empty string can be used to force Redis to log on the standard output. Note that if you use standard output for logging but daemonize, logs will be sent to /dev/null.
  announce:
    default: false
    description: |
      It is useful in environments where, because of NAT, Sentinel is reachable from outside via a non-local address. When announce is provided, the Sentinel will claim the specified IP address in HELLO messages used to gossip its presence, instead of auto-detecting the local address as it usually does.
  store_dir:
    default: "/var/vcap/store/redis_sentinel"
    description: |
      Persistent location where to save Redis Sentinel configuration.
################################# TLS/SSL #####################################
  tls:
    default: false
    description: |
      To enable/disable TLS/SSL.
  tls_port:
    default: "26379"
    description: |
      The TLS/SSL port to use.
  tls_keys_dir:
    default: "/var/vcap/jobs/redis_sentinel/keys"
    description: |
      The directory where TLS keys are stored.
  tls_ca_certificate:
    description: |
      Authority certificate for TLS connection.
  tls_ca_private_key:
    description: |
      Authority private key for TLS connection.
  tls_ca_cert_file:
    default: "ca.crt"
    description: |
      Certificate authority's certificate file name.
  tls_ca_key_file:
    default: "ca.key"
    description: |
      Certificate authority's private key file name.
  tls_key_length:
    default: "2048"
    description: |
      Private key length for TLS connection.
  tls_cert_duration:
    default: "365"
    description: |
      Certificate duration for TLS connection.
  tls_cert_file:
    default: "sentinel.crt"
    description: |
      Configure a X.509 certificate and private key to use for authenticating the server to connected clients, masters or cluster peers. These files should be PEM formatted.
  tls_key_file:
    default: "sentinel.key"
    description: |
      See tls_cert_file.
  tls_dh_params_file:
    default: "sentinel.dh"
    description: |
      Configure a DH parameters file to enable Diffie-Hellman (DH) key exchange.
  tls_dh_length:
    default: "2048"
    description: |
      Length of DH parameters.
  tls_ca_cert_dir:
    default: "/var/vcap/packages/redis/ca"
    description: |
      See tls_ca_cert_file.
  tls_auth_clients:
    default: true
    description: |
      By default, clients (including replica servers) on a TLS port are required to authenticate using valid client side certificates. It is possible to disable authentication by setting tls_auth_clients to false.
  tls_replication:
    default: false
    description: |
      By default, a Redis replica does not attempt to establish a TLS connection
      with its master. Set this property to true to enable TLS on replication links.
  tls_protocols:
    description: |
      Explicitly specify TLS versions to support. Allowed values are case insensitive and include "TLSv1", "TLSv1.1", "TLSv1.2", "TLSv1.3" (OpenSSL >= 1.1.1) or any combination. To enable only TLSv1.2 and TLSv1.3, use: "TLSv1.2 TLSv1.3".
  tls_ciphers:
    description: |
      Configure allowed ciphers.  See the ciphers(1ssl) manpage for more information about the syntax of this string.
      Note: this configuration applies only to <= TLSv1.2.
  tls_ciphersuites:
    description: |
      Configure allowed TLSv1.3 ciphersuites.  See the ciphers(1ssl) manpage for more information about the syntax of this string, and specifically for TLSv1.3 ciphersuites.
  tls_prefer_server_ciphers:
    default: false
    description: |
      When choosing a cipher, use the server's preference instead of the client
      preference. By default, the server follows the client's preference.
  tls_session_caching:
    default: true
    description: |
      By default, TLS session caching is enabled to allow faster and less expensive reconnections by clients that support it. Set this property to false to disable caching.
  tls_session_cache_size:
    default: "20480"
    description: |
      Change the default number of TLS sessions cached. A zero value sets the cache to unlimited size. The default size is 20480.
  tls_session_cache_timeout:
    default: "300"
    description: |
      Change the default timeout of cached TLS sessions. The default timeout is 300 seconds.
################################# SECURITY ######################################
  password:
    description: |
      You can also configure the Sentinel instance itself in order to require client authentication via the AUTH command, however this feature is only available starting with Redis 5.0.1.
      In order to do so, just add the following configuration directive to all your Sentinel instances:
        requirepass "your_password_here"
      When configured this way, Sentinels will do two things:
        1. A password will be required from clients in order to send commands to Sentinels. This is obvious since this is how such configuration directive works in Redis in general.
        2. Moreover the same password configured to access the local Sentinel, will be used by this Sentinel instance in order to authenticate to all the other Sentinel instances it connects to.
      This means that you will have to configure the same requirepass password in all the Sentinel instances. This way every Sentinel can talk with every other Sentinel without any need to configure for each Sentinel the password to access all the other Sentinels, that would be very impractical.
      Before using this configuration make sure your client library is able to send the AUTH command to Sentinel instances.
      