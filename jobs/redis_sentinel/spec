---
name: redis_sentinel

templates:
  config/redis_sentinel.conf.erb: config/redis_sentinel.conf
  bin/pre-start.erb: bin/pre-start
  bin/redis_sentinel_ctl.erb: bin/redis_sentinel_ctl
  bin/pre-stop.erb: bin/pre-stop

packages:
- redis

provides:
- name: redis_sentinel_conn
  type: sentinel_conn
  properties:
  - bind
  - port
  - password
  - max_detected_failures
  - down_after_milliseconds
  - parallel_syncs
  - failover_timeout

consumes:
- name: redis_conn
  type: conn
- name: redis_sentinel_conn
  type: sentinel_conn

properties:
  bind:
    default: false
    description:  |
      Specify this property to "true" if you would like the bind address of a given instance to be automatically set to its assigned static IP. Otherwise, Redis Sentinel listens only on "localhost".
  port:
    default: "26379"
    description: |
      The port that this Redis Sentinel instance will run on.
  run_dir:
    default: "/var/vcap/sys/run/redis_sentinel"
    description: |
      Directory where to store Redis Sentinel pid file.
  pidfile:
    default: "redis_sentinel.pid"
    description: |
      When running daemonized, Redis Sentinel writes a pid file.
  log_dir:
    default: "/var/vcap/sys/log/redis_sentinel"
    description: |
      Directory where to store Redis Sentinel log file.
  logfile:
    default: "redis_sentinel.log"
    description: |
      Specify the log file name. Also the empty string can be used to force Redis to log on the standard output. Note that if you use standard output for logging but daemonize, logs will be sent to /dev/null.
  announce:
    default: false
    description: |
      It is useful in environments where, because of NAT, Sentinel is reachable from outside via a non-local address. When announce is provided, the Sentinel will claim the specified IP address in HELLO messages used to gossip its presence, instead of auto-detecting the local address as it usually does.
  store_dir:
    default: "/var/vcap/store/redis_sentinel"
    description: |
      Persistent location where to save Redis Sentinel configuration.
  max_detected_failures:
    default: "2"
    description: |      
      The max_detected_failures is the number of Sentinels that need to agree about the fact the master is not reachable, in order to really mark the master as failing, and eventually start a failover procedure if possible.
      However the max_detected_failures is only used to detect the failure. In order to actually perform a failover, one of the Sentinels need to be elected leader for the failover and be authorized to proceed. This only happens with the vote of the majority of the Sentinel processes.
  down_after_milliseconds:
    default: "30000"
    description: |
      Number of milliseconds the master (or any attached replica or sentinel) should be unreachable (as in, not acceptable reply to PING, continuously, for the specified period) in order to consider it in S_DOWN state (Subjectively Down).
  parallel_syncs:
    default: "1"
    description: "How many replicas we can reconfigure to point to the new replica simultaneously during the failover. Use a low number if you use the replicas to serve query to avoid that all the replicas will be unreachable at about the same time while performing the synchronization with the master."
  failover_timeout:
    default: "180000"
    description: |
      Specifies the failover timeout in milliseconds. It is used in many ways:
        - The time needed to re-start a failover after a previous failover was already tried against the same master by a given Sentinel, is two times the failover timeout.
        - The time needed for a replica replicating to a wrong master according to a Sentinel current configuration, to be forced to replicate with the right master, is exactly the failover timeout (counting since the moment a Sentinel detected the misconfiguration).
        - The time needed to cancel a failover that is already in progress but did not produced any configuration change (SLAVEOF NO ONE yet not acknowledged by the promoted replica).
        - The maximum time a failover in progress waits for all the replicas to be reconfigured as replicas of the new master. However even after this time the replicas will be reconfigured by the Sentinels anyway, but not with the exact parallel-syncs progression as specified.
      Default is 3 minutes.
  password:
    description: |
      You can also configure the Sentinel instance itself in order to require client authentication via the AUTH command, however this feature is only available starting with Redis 5.0.1.
      In order to do so, just add the following configuration directive to all your Sentinel instances:
        requirepass "your_password_here"
      When configured this way, Sentinels will do two things:
        1. A password will be required from clients in order to send commands to Sentinels. This is obvious since this is how such configuration directive works in Redis in general.
        2. Moreover the same password configured to access the local Sentinel, will be used by this Sentinel instance in order to authenticate to all the other Sentinel instances it connects to.
      This means that you will have to configure the same requirepass password in all the Sentinel instances. This way every Sentinel can talk with every other Sentinel without any need to configure for each Sentinel the password to access all the other Sentinels, that would be very impractical.
      Before using this configuration make sure your client library is able to send the AUTH command to Sentinel instances.
