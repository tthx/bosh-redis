#!/bin/bash
<%- master=link('redis_conn')
  sentinel=nil
  if_link('redis_sentinel_conn'){ |x| sentinel=x } -%>
  
REDIS_HOME="/var/vcap/packages/redis";
SERVER="${REDIS_HOME}/bin/redis-server";
CLI="${REDIS_HOME}/bin/redis-cli";
RUN_DIR="<%= p('run_dir') %>";
LOG_DIR="<%= p('log_dir') %>";
LOG_FILE="${LOG_DIR}/<%= p('logfile') %>";
STORE_DIR="<%= p('store_dir') %>";
PID_FILE="${RUN_DIR}/<%= p('pidfile') %>";
CONF_DIR="/var/vcap/jobs/redis/config";
CONF_FILE="${CONF_DIR}/redis.conf";
IP="127.0.0.1";
<%- if master.p('bind') -%>
IP="<%= spec.ip %>";
<%- end -%>
PORT="<%= master.p('port') %>";
CRED="";
<%- master.if_p('password') do |x|
    unless x.to_s.empty? -%>
CRED="-a <%= x %>";
<%- end
  end -%>
SHUTDOWN="SHUTDOWN";
<%- master.if_p('rename_shutdown_command') do |x| -%>
SHUTDOWN="<%= x %>";
<%- end -%>

case "${1}" in
  start)
    mkdir -p \
      "${RUN_DIR}" \
      "${LOG_DIR}" \
      "${STORE_DIR}";

    chown -R vcap:vcap \
      "${RUN_DIR}" \
      "${LOG_DIR}" \
      "${STORE_DIR}";

    chmod 750 "${STORE_DIR}";
    touch "${LOG_FILE}";
    chown vcap:vcap "${LOG_FILE}";
    chmod 770 "${CONF_DIR}"
    chmod 660 "${CONF_FILE}";

    # Remove temp backup files that might be left over because of a
    # previously aborted BGSAVE, just to save space
    rm -f "${STORE_DIR}"/temp-*.rdb

    ulimit -n 10032

    if [[ -f /sys/kernel/mm/transparent_hugepage/enabled ]];
    then
      # fail silently as bosh-lite is a read-only file system
      set +e;
      echo never > /sys/kernel/mm/transparent_hugepage/enabled;
      set -e;
    fi

    sysctl -w net.core.somaxconn=511;

    # Recommended for running redis on a VM in production
    # (https://www.pivotaltracker.com/story/show/74949514)
    sysctl vm.overcommit_memory=1;

    if [[ -f "${PID_FILE}" ]];
    then
      echo "${PID_FILE} exists, process is already running or crashed.";
    else
      echo "Starting Redis server...";
<%- if master.p('replication') || master.p('cluster_enabled').eql?('yes')
    redis_persistance_rdb=0
    master.if_p('save') do |x|
      if !x.to_s.empty?
        redis_persistance_rdb=1
      end
    end
    if redis_persistance_rdb==0 && master.p('appendonly').eql?('no')
      if master.p('cluster_enabled').eql?('yes') && master.p('cluster_replicas_per_node').to_i>0 -%>
      sleep <%= (master.p('cluster_node_timeout').to_i*3)/2000 %>;
<%-   end
      if master.p('replication') && !sentinel.nil? -%>
      sleep <%= (sentinel.p('down_after_milliseconds').to_i*3)/2000 %>;
<%-   end
    end
  end -%>
      exec chpst -u vcap:vcap "${SERVER}" "${CONF_FILE}" \
        >> "${LOG_FILE}" 2>&1;
    fi
    ;;
  stop)
    if [[ -f "${PID_FILE}" ]];
    then
      redis_pid="$(cat ${PID_FILE})";
      echo "Stopping...";
      exec chpst -u vcap:vcap \
        "${CLI}" \
          -h "${IP}" \
          -p "${PORT}" \
          ${CRED} \
          ${SHUTDOWN};
      while [[ -x "/proc/${redis_pid}" ]];
      do
        echo "Waiting for Redis to shutdown...";
        sleep 1;
      done
      rm -f "${PID_FILE}"
      echo "Redis stopped.";
    else
      echo "${PID_FILE} does not exist, process is not running.";
    fi
    ;;
  *)
    echo "Usage: ${0} {start|stop}";
  ;;
esac
exit 0;
