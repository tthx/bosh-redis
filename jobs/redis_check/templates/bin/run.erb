#!/bin/bash
<%- master=link('redis_conn')
  slave=nil
  if_link('slave_conn'){ |x| slave=x }
  sentinel=nil
  if_link('redis_sentinel_conn'){ |x| sentinel=x }
  sentinel_slave=nil
  if_link('sentinel_slave_conn'){ |x| sentinel_slave=x } -%>

ERR=0;
CLI="/var/vcap/packages/redis/bin/redis-cli";
REDIS_IP="127.0.0.1";
<%- if master.p('bind') -%>
REDIS_IP="<%= spec.ip %>";
<%- end -%>
REDIS_PORT="<%= master.p('port') %>";
REDIS_CRED="";
<%- master.if_p('password') do |x|
    unless x.to_s.empty? -%>
REDIS_CRED="-a <%= x %>";
<%- end
  end -%>
CLI_CLUSTER_OPTS="";

#
# Look up Redis instance
#
MSG="$(${CLI} \
  -h ${REDIS_IP} \
  -p ${REDIS_PORT} \
  ${REDIS_CRED} \
  PING)";
ERR=${?}
if [[ ${ERR} -eq 0 ]] && [[ "${MSG}" == "PONG" ]];
then
  echo -e "####\n#### Redis server at address [${REDIS_IP}] and port [${REDIS_PORT}] is available: \"${MSG}\".";
else
  echo "ERROR: Redis server at address [${REDIS_IP}] and port [${REDIS_PORT}] is unavailable: \"${MSG}\"." >&2;
fi

<%- if master.p('replication') && !sentinel.nil?
  sentinel_addresses=''
  sentinel.instances.each{ |x| sentinel_addresses.concat(x.address).concat(' ') }
  if !sentinel_slave.nil?
    sentinel_slave.instances.each{ |x| sentinel_addresses.concat(x.address).concat(' ') }
  end -%>
#
# Look up Redis Sentinel instance
#
SENTINEL_ADDRESSES="<%= sentinel_addresses %>";
SENTINEL_PORT="<%= sentinel.p('port') %>";
SENTINEL_CRED="";
<%- sentinel.if_p('password') do |x|
    unless x.to_s.empty? -%>
SENTINEL_CRED="-a <%= x %>";
<%- end
  end -%>

for x in ${SENTINEL_ADDRESSES};
do
  MSG="$(${CLI} \
    -h ${x} \
    -p ${SENTINEL_PORT} \
    ${SENTINEL_CRED} \
    PING)";
  if [[ ${?} -eq 0 ]] && [[ "${MSG}" == "PONG" ]];
  then
    echo -e "####\n#### Redis Sentinel at address [${x}] and port [${SENTINEL_PORT}] is available: \"${MSG}\".";
    MSG="$(${CLI} \
      -h ${x} \
      -p ${SENTINEL_PORT} \
      ${SENTINEL_CRED} \
      SENTINEL master <%= spec.deployment %>)";
    if [[ ${?} -eq 0 ]];
    then
      echo -e "####\n#### Available master for <%= spec.deployment %>: \"${MSG}\".";
      MSG="$(${CLI} \
        -h ${x} \
        -p ${SENTINEL_PORT} \
        ${SENTINEL_CRED} \
        SENTINEL slaves <%= spec.deployment %>)";
    else
      ERR=1;
      echo "ERROR: Unable to find Redis master for <%= spec.deployment %> from Redis Sentinel ${x}: \"${MSG}\"." >&2;
    fi
    if [[ ${?} -eq 0 ]];
    then
      echo -e "####\n#### Available slaves for <%= spec.deployment %>: \"${MSG}\"."
      MSG="$(${CLI} \
        -h ${x} \
        -p ${SENTINEL_PORT} \
        ${SENTINEL_CRED} \
        SENTINEL sentinels <%= spec.deployment %>)";
    else
      ERR=1;
      echo "ERROR: Unable to find Redis slaves for <%= spec.deployment %> from Redis Sentinel ${x}: \"${MSG}\"." >&2;
    fi
    if [[ ${?} -eq 0 ]];
    then
      echo -e "####\n#### Available sentinels for <%= spec.deployment %>: \"${MSG}\".";
    else
      ERR=1;
      echo "ERROR: Unable to find Redis Sentinel for <%= spec.deployment %> from Redis Sentinel ${x}: \"${MSG}\"." >&2;
    fi
  else
    ERR=1;
    echo "ERROR: Redis Sentinel at address [${x}] and port [${SENTINEL_PORT}] is unavailable: \"${MSG}\"." >&2;
  fi
done
<%- end
  if master.p('cluster_enabled').eql?('yes')
  master_addresses=''
  master.instances.each{ |x| master_addresses.concat(x.address).concat(' ') }
  master_instances=master.instances.length
  replicas_per_node=master.p('cluster_replicas_per_node').to_i
  slaves_addresses=''
  slave_instances=0
  if !slave.nil?
    if replicas_per_node>0
      slave.instances.each{ |x| slaves_addresses.concat(x.address).concat(' ') }
      slave_instances=slave.instances.length
    else
      slave.instances.each{ |x| master_addresses.concat(x.address).concat(' ') }
      master_instances+=slave.instances.length
      replicas_per_node=0
    end
  elsif replicas_per_node>0
    if master_instances>replicas_per_node
      addresses=master_addresses.split
      master_instances=master_instances.div(replicas_per_node+1)
      master_addresses=addresses.slice(0..master_instances-1).join(' ')
      slaves_addresses=addresses.slice(master_instances..-1)
      slave_instances=slaves_addresses.length
      slaves_addresses=slaves_addresses.join(' ')
    else
      replicas_per_node=0
    end
  end -%>
#
# Look up Redis cluster
#
MASTER_ADDRESSES="<%= master_addresses %>";
MASTER_INSTANCES="<%= master_instances %>";
SLAVE_ADDRESSES="<%= slaves_addresses %>";
SLAVE_INSTANCES="<%= slave_instances %>";
REDIS_ADDRESSES="${MASTER_ADDRESSES} ${SLAVE_ADDRESSES}";
REDIS_INSTANCES="<%= master_instances+slave_instances %>";
REPLICAS_PER_NODE="<%= replicas_per_node %>";

echo "#### Initial masters addresses: [${MASTER_ADDRESSES}]";
echo "#### Number of masters: [${MASTER_INSTANCES}]";
echo "#### Initial slaves addresses: [${SLAVE_ADDRESSES}]";
echo "#### Number of slaves: [${SLAVE_INSTANCES}]";
echo "#### Replicas per master: [${REPLICAS_PER_NODE}]";

MSG="$("${CLI}" \
  -h "${REDIS_IP}" \
  -p "${REDIS_PORT}" \
  ${REDIS_CRED} \
  CLUSTER NODES)";
ERR=${?};
if [[ ${ERR} -eq 0 ]];
then
  echo "#### Redis CLUSTER NODES command results: \"${MSG}\"".
  AVAILABLE_NODES=0;
  for i in $(echo "${MSG}" | awk '{print $2;}');
  do
    for j in ${REDIS_ADDRESSES};
    do
      if [[ "${i%%@*}" == "${j}:${REDIS_PORT}" ]];
      then
        ((AVAILABLE_NODES++));
      fi
    done
  done
  if [[ ${REDIS_INSTANCES} -eq ${AVAILABLE_NODES} ]];
  then
    echo "#### All required Redis nodes [${REDIS_INSTANCES}] are available in the cluster.";
    AVAILABLE_NODES=$(echo "${MSG}" | awk '$3~/master/{print $2;}' | wc -l);
    if [[ ${MASTER_INSTANCES} -eq ${AVAILABLE_NODES} ]];
    then
      echo "#### All required Redis master nodes [${MASTER_INSTANCES}] are available.";
    else
      ERR=1;
      echo "ERROR: The required Redis master nodes [${MASTER_INSTANCES}] is not equal to the available master nodes [${AVAILABLE_NODES}]." >&2;
    fi
    AVAILABLE_NODES=$(echo "${MSG}" | awk '$3~/slave/{print $2;}' | wc -l);
    if [[ ${SLAVE_INSTANCES} -eq ${AVAILABLE_NODES} ]];
    then
      echo "#### All required Redis slave nodes [${SLAVE_INSTANCES}] are available.";
    else
      ERR=1;
      echo "ERROR: The required Redis slave nodes [${SLAVE_INSTANCES}] is not equal to the available slave nodes [${AVAILABLE_NODES}]." >&2;
    fi
  else
    ERR=1;
    echo "ERROR: The required Redis nodes [${REDIS_INSTANCES}] is not equal to the available nodes [${AVAILABLE_NODES}]." >&2;
  fi
else
  echo "ERROR: Redis CLUSTER NODES command failed: \"${MSG}\"." >&2;
fi
CLI_CLUSTER_OPTS="-c";
<%- end -%>

#
# CRUD tests
#
if [[ ${ERR} -eq 0 ]];
then
  KV="<%= spec.deployment+'_'+spec.name+'_'+spec.address.to_s %>";
<%- if master.p('replication') && !sentinel.nil? -%>
  for x in ${SENTINEL_ADDRESSES};
  do
    MSG="$(${CLI} \
      -h ${x} \
      -p ${SENTINEL_PORT} \
      ${SENTINEL_CRED} \
      SENTINEL get-master-addr-by-name <%= spec.deployment %>)";
    if [[ ${?} -ne 0 ]] || [[ -z "${MSG}" ]];
    then
      ERR=1;
      echo "ERROR: Unable to get Redis master from Sentinel [${x}]: \"${MSG}\"." >&2;
    else
      REDIS_IP="${MSG%%[[:space:]]*}";
      REDIS_PORT="${MSG#*[[:space:]]}";
      echo -e "####\n#### CRUD operations to Redis master [${REDIS_IP}:${REDIS_PORT}] get from Sentinel [${x}] :";
<%- end -%>
      CLI_OPTS="${REDIS_CRED} ${CLI_CLUSTER_OPTS} -h ${REDIS_IP} -p ${REDIS_PORT}";
      MSG="$(${CLI} ${CLI_OPTS} SET ${KV} ${KV})";
      if [[ ${?} -eq 0 ]];
      then
        echo "Create operation: succeed.";
        MSG="$(${CLI} ${CLI_OPTS} GET ${KV})";
        if [[ ${?} -eq 0 ]] && [[ "${KV}" == "${MSG}" ]];
        then
          echo "Read operation: succeed";
          MSG="$(${CLI} ${CLI_OPTS} APPEND ${KV} ${KV})";
          if [[ ${?} -eq 0 ]];
          then
            echo "Append operation: succeed";
            MSG="$(${CLI} ${CLI_OPTS} GET ${KV})";
            if [[ ${?} -eq 0 ]] && [[ "${KV}${KV}" == "${MSG}" ]];
            then
              echo "Update operation: succeed.";
            else
              ERR=1;
              echo "ERROR: Update operation: \"${MSG}\"." >&2;
            fi
          else
            ERR=1;
            echo "ERROR: Append operation: \"${MSG}\"." >&2;
          fi
        else
          ERR=1;
          echo "ERROR: Read operation: \"${MSG}\"." >&2;
        fi
        MSG="$(${CLI} ${CLI_OPTS} DEL ${KV})";
        if [[ ${?} -eq 0 ]];
        then
          echo "Delete operation: succeed.";
        else
          ERR=1;
          echo "ERROR: Delete operation: \"${MSG}\"." >&2;
        fi
      else
        ERR=1;
        echo "ERROR: Create operation: \"${MSG}\"." >&2;
      fi
<%- if master.p('replication') && !sentinel.nil? -%>
    fi
  done
<%- end -%>
fi

exit ${ERR};
