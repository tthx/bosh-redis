#!/bin/bash
<%- master=link('redis_conn')
  if_link('master_conn'){ |x| master=x }
  slave=link('redis_conn')
  if_link('slave_conn'){ |x| slave=x }
  sentinel=nil
  if_link('SENTINEL_conn'){ |x| sentinel=x }
  sentinel_slave=nil
  if_link('sentinel_slave_conn'){ |x| sentinel_slave=x } -%>

ERR=0;
CLI="/var/vcap/packages/redis/bin/redis-cli";

REDIS_IP="127.0.0.1";
<%- if master.p('bind') -%>
REDIS_IP="<%= spec.ip %>";
<%- end -%>
REDIS_PORT="<%= master.p('port') %>";

REDIS_PASSWORD="";
<%- master.if_p('password') do |password|
    unless password.to_s.empty? -%>
REDIS_PASSWORD="-a <%= password %>";
<%- end
  end -%>

#
# Look up Redis instance
#
MSG="$(${CLI} ${REDIS_PASSWORD} -h ${REDIS_IP} -p ${REDIS_PORT} PING)";
ERR=${?}
if [[ ${ERR} -eq 0 ]] && [[ "${MSG}" == "PONG" ]];
then
  echo "Redis server at address [${REDIS_IP}] and port [${REDIS_PORT}] is available.";
else
  echo "ERROR: Redis server at address [${REDIS_IP}] and port [${REDIS_PORT}] is unavailable." >&2;
fi

#
# Look up Redis Sentinel instance
#
<%- if master.p('replication') && !sentinel.nil?
  sentinel_addresses=''
  sentinel.instances.each{ |x| sentinel_addresses.concat(x.address).concat(' ') }
  if !sentinel_slave.nil?
    sentinel_slave.instances.each{ |x| sentinel_addresses.concat(x.address).concat(' ') }
  end -%>
SENTINEL_ADDRESSES="<%= sentinel_addresses %>";
SENTINEL_PORT="<%= sentinel.p('port') %>";
SENTINEL_PASSWORD="";
<%- sentinel.if_p('password') do |password|
    unless password.to_s.empty? -%>
SENTINEL_PASSWORD="-a <%= password %>";
<%- end
  end -%>

SENTINEL_ERROR="";
for x in ${SENTINEL_ADDRESSES};
do
  MSG="$(${CLI} \
    ${SENTINEL_PASSWORD} \
    -h ${x} \
    -p ${SENTINEL_PORT} \
    PING)";
  if [[ ${?} -eq 0 ]] && [[ "${MSG}" == "PONG" ]];
  then
    echo "Redis Sentinel at address [${x}] and port [${SENTINEL_PORT}] is available: ${MSG}";
    MSG="(${CLI} \
      ${SENTINEL_PASSWORD} \
      -h ${x} \
      -p ${SENTINEL_PORT} \
      SENTINEL master <%= spec.deployment %>)";
    if [[ ${?} -eq 0 ]];
    then
      echo "Available master for <%= spec.deployment %> : ${MSG}";
      MSG="(${CLI} \
        ${SENTINEL_PASSWORD} \
        -h ${x} \
        -p ${SENTINEL_PORT} \
        SENTINEL slaves <%= spec.deployment %>)";
    else
      echo "ERROR: Unable to find Redis master for <%= spec.deployment %> from Redis Sentinel ${x} : ${MSG}" >&2;
    fi
    if [[ ${?} -eq 0 ]];
    then
      echo "Available slaves for <%= spec.deployment %> : ${MSG}"
      MSG="(${CLI} \
        ${SENTINEL_PASSWORD} \
        -h ${x} \
        -p ${SENTINEL_PORT} \
        SENTINEL sentinels <%= spec.deployment %>)";
    else
      echo "ERROR: Unable to find Redis slaves for <%= spec.deployment %> from Redis Sentinel ${x} : ${MSG}" >&2;
    fi
    if [[ ${?} -eq 0 ]];
    then
      echo "Available sentinels for <%= spec.deployment %> : ${MSG}";
    else
      echo "ERROR: Unable to find Redis Sentinel for <%= spec.deployment %> from Redis Sentinel ${x} : ${MSG}" >&2;
    fi
  else
    echo "ERROR: Redis Sentinel at address [${x}] and port [${SENTINEL_PORT}] is unavailable: ${MSG}" >&2;
  fi
  if [[ ${?} -ne 0 ]];
  then
    ERR=1;
    SENTINEL_ERROR+="${x} ";
  fi
done
<%- end -%>

#
# Look up Redis cluster
#
CLUSTER_OPTS="";
<%- if master.p('cluster_enabled').eql?('yes') -%>
CLUSTER_OPTS="-c";
<%- addresses=''
  master.instances.each{ |x| addresses.concat(x.address).concat(' ') }
  instances=master.instances.length -%>
MASTER_ADDRESSES="<%= addresses %>";
MASTER_INSTANCES="<%= instances %>";
<%- slaves_addresses=''
  slave_instances=0
  if !slave.instances[0].name.eql?(master.instances[0].name)
    slave.instances.each{ |x| slaves_addresses.concat(x.address).concat(' ') }
    slave_instances=slave.instances.length
  end
  addresses.concat(slaves_addresses)
  instances+=slave_instances -%>
SLAVE_ADDRESSES="<%= slaves_addresses %>";
SLAVE_INSTANCES="<%= slave_instances %>";
REDIS_ADDRESSES="<%= addresses %>";
REDIS_INSTANCES="<%= instances %>";
SLAVE_PER_INSTANCE="<%= master.p('cluster_replicas_per_node') %>";

CLUSTER_NODES="$(${CLI} \
  ${REDIS_PASSWORD} \
  -h ${REDIS_IP} \
  -p ${REDIS_PORT} \
  CLUSTER NODES)";
ERR=${?};
if [[ ${ERR} -eq 0 ]];
then
  echo "Redis CLUSTER NODES command results:";
  echo "${CLUSTER_NODES}";
  AVAILABLE_NODES=0;
  for i in $(echo "${CLUSTER_NODES}" | awk '{print $2;}');
  do
    for j in ${REDIS_ADDRESSES};
    do
      if [[ "${i%%@*}" == "${j}:${REDIS_PORT}" ]];
      then
        ((AVAILABLE_NODES++));
      fi
    done
  done
  if [[ ${REDIS_INSTANCES} -eq ${AVAILABLE_NODES} ]];
  then
    echo "All requested Redis nodes [${REDIS_INSTANCES}] are available.";
<%- if !slave.instances[0].name.eql?(master.instances[0].name) -%>
    MASTER_NODES="$(echo "${CLUSTER_NODES}" | \
      awk '$3~/master/{print $2;}')";
    AVAILABLE_NODES=0;
    for i in ${MASTER_ADDRESSES};
    do
      for j in ${MASTER_NODES};
      do
        if [[ "${i}:${REDIS_PORT}" == "${j%%@*}" ]];
        then
          ((AVAILABLE_NODES++));
        fi
      done
    done
    if [[ ${MASTER_INSTANCES} -eq ${AVAILABLE_NODES} ]];
    then
      echo "All requested Redis master nodes [${MASTER_INSTANCES}] are available.";
      ERR=0;
    else
      echo "WARNING: The requested Redis master nodes [${MASTER_INSTANCES}] is not equal to the initial available master nodes [${AVAILABLE_NODES}]." >&2;
      ERR=1;
    fi
    SLAVE_NODES="$(echo "${CLUSTER_NODES}" | \
      awk '$3~/slave/{print $2;}')";
    AVAILABLE_NODES=0;
    for i in ${SLAVE_ADDRESSES};
    do
      for j in ${SLAVE_NODES};
      do
        if [[ "${i}:${REDIS_PORT}" == "${j%%@*}" ]];
        then
          ((AVAILABLE_NODES++));
        fi
      done
    done
    if [[ ${SLAVE_INSTANCES} -eq ${AVAILABLE_NODES} ]];
    then
      echo "All requested Redis slave nodes [${SLAVE_INSTANCES}] are available.";
      ERR=0;
    else
      echo "WARNING: The requested Redis slave nodes [${SLAVE_INSTANCES}] is not equal to the initial available slave nodes [${AVAILABLE_NODES}]." >&2;
      ERR=1;
    fi
<%- end -%>
  else
    echo "ERROR: The requested Redis nodes [${REDIS_INSTANCES}] is not equal to the available nodes [${AVAILABLE_NODES}]" >&2;
    ERR=1;
  fi
else
  echo "ERROR: Redis CLUSTER NODES command failed." >&2;
  ERR=1;
fi
<%- end -%>

#
# CRUD tests
#
if [[ ${ERR} -eq 0 ]];
then
  KV="<%= spec.deployment+'_'+link('redis_conn').instances[spec.index].name+'_'+spec.index.to_s %>";
<%- if master.p('replication') && !sentinel.nil? -%>
  for x in ${SENTINEL_ADDRESSES};
  do
    REDIS_MASTER="$(${CLI} \
      ${SENTINEL_PASSWORD} \
      -h ${x} \
      -p ${SENTINEL_PORT} \
      SENTINEL get-master-addr-by-name <%= spec.deployment %>)";
    REDIS_IP="${REDIS_MASTER%%[[:space:]]*}";
    REDIS_PORT="${REDIS_MASTER#*[[:space:]]}";
    echo "CRUD operations to Redis master [${REDIS_IP}:${REDIS_PORT}] get from Sentinel [${x}] :";
<%- end -%>
    CLI_OPTS="${REDIS_PASSWORD} ${CLUSTER_OPTS} -h ${REDIS_IP} -p ${REDIS_PORT}";
    MSG="$(${CLI} ${CLI_OPTS} SET ${KV} ${KV})";
    ERR=${?};
    if [[ ${ERR} -eq 0 ]];
    then
      echo "Create operation: succeed.";
      MSG="$(${CLI} ${CLI_OPTS} GET ${KV})";
      ERR=${?};
      if [[ ${ERR} -eq 0 ]] && [[ "${KV}" == "${MSG}" ]];
      then
        echo "Read operation: succeed";
        MSG="$(${CLI} ${CLI_OPTS} APPEND ${KV} ${KV})";
        ERR=${?};
        if [[ ${ERR} -eq 0 ]];
        then
          echo "Append operation: succeed";
          MSG="$(${CLI} ${CLI_OPTS} GET ${KV})";
          ERR=${?};
          if [[ ${ERR} -eq 0 ]] && [[ "${KV}${KV}" == "${MSG}" ]];
          then
            echo "Update operation: succeed.";
          else
            echo "ERROR: Update operation: ${MSG}" >&2;
          fi
        else
          echo "ERROR: Append operation: ${MSG}" >&2;
        fi
      else
        echo "ERROR: Read operation: ${MSG}" >&2;
      fi
      MSG="$(${CLI} ${CLI_OPTS} DEL ${KV})";
      ERR=${?};
      if [[ ${ERR} -eq 0 ]];
      then
        echo "Delete operation: succeed.";
      else
        echo "ERROR: Delete operation: ${MSG}" >&2;
      fi
    else
      echo "ERROR: Create operation: ${MSG}" >&2;
    fi
<%- if master.p('replication') && !sentinel.nil? -%>
  done
<%- end -%>
fi

exit ${ERR};
